/**
 * @generated-from ./$cursor.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncIterableCurry } from '../../internal/async-iterable.js';
import CircularBuffer from '../../internal/circular-buffer.js';
import { asyncConcat } from '../$concat/async-concat.js';
import { repeat } from '../repeat/repeat.js';
export async function* asyncCursor(iterable, { size, trailing, filler }) {
  const circular = new CircularBuffer(size);
  circular.fill(filler);

  if (trailing) {
    let index = 0;

    for await (const item of asyncConcat(iterable, repeat(filler, size - 1))) {
      circular.push(item);

      if (index + 1 >= size) {
        yield circular.readOnlyCopy;
      }

      index++;
    }
  } else {
    for await (const item of iterable) {
      circular.push(item);
      yield circular.readOnlyCopy;
    }
  }
}
export default asyncIterableCurry(asyncCursor);
